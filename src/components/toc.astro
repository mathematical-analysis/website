---
import type { MarkdownHeading } from "astro";
type Props = {
  headings: MarkdownHeading[];
};
type HeadingWithSubheadings = MarkdownHeading & {
  subheadings: MarkdownHeading[];
};
const { headings } = Astro.props;
const grouppedHeadings = headings.reduce((array, heading) => {
  if (heading.depth === 2) {
    array.push({ ...heading, subheadings: [] });
  } else if (heading.depth === 3) {
    array.at(-1)?.subheadings.push(heading);
  }
  return array;
}, [] as HeadingWithSubheadings[]);
---

<button
  id="tocToggle"
  class="lg:hidden fixed z-30 top-4 right-4 p-2 bg-neutral-800 rounded text-neutral-50"
  aria-label="Toggle TOC"
>
  &#9776;
</button>
<nav
  id="table-of-contents"
  aria-label="Table Of Contents"
  class="fixed top-0 right-0 w-80 bg-neutral-950 lg:bg-transparent text-neutral-50 px-6 py-12 flex flex-col space-y-8 h-screen overflow-auto ease-out transition-transform duration-200 z-20 translate-x-full lg:translate-x-0"
>
  <ol>
    {
      grouppedHeadings.map((h) => (
        <li>
          <a
            href={`#${h.slug}`}
            class="opacity-70 hover:opacity-100 transition-opacity ease-in-out"
          >
            {h.text}
          </a>
          {h.subheadings.length > 0 && (
            <ol>
              {h.subheadings.map((sub) => (
                <li>
                  <a
                    href={`#${sub.slug}`}
                    class="opacity-40 ml-4 hover:opacity-100 transition-opacity ease-in-out"
                  >
                    {sub.text}
                  </a>
                </li>
              ))}
            </ol>
          )}
        </li>
      ))
    }
  </ol>
</nav>

<script>
  const tocToggle = document.getElementById("tocToggle");
  const toc = document.getElementById("table-of-contents");
  if (tocToggle !== null) {
    tocToggle.addEventListener("click", function () {
      if (toc !== null) {
        if (toc.classList.contains("translate-x-full")) {
          toc.classList.remove("translate-x-full");
          toc.classList.add("translate-x-0");
        } else {
          toc.classList.remove("translate-x-0");
          toc.classList.add("translate-x-full");
        }
      }
    });
  }

  function dismissTocOnScroll() {
    if (toc && !toc.classList.contains("translate-x-full")) {
      toc.classList.add("translate-x-full");
    }
  }

  function dismissTocOnClickOutside(event: MouseEvent) {
    if (
      toc &&
      !(toc as Node).contains(event.target as Node) &&
      tocToggle &&
      !tocToggle.contains(event.target as Node)
    ) {
      toc.classList.add("translate-x-full");
    }
  }

  window.addEventListener("DOMContentLoaded", () => {
    document.addEventListener("click", dismissTocOnClickOutside);
    window.addEventListener("scroll", dismissTocOnScroll, {
      passive: true,
    });
  });
</script>

<script is:inline>
  // This script tag is useful only if you want to display the TOC alongside the blog post...
  // ... and highlight the section that the user is currently reading through.
  // Feel free to remove this tag if you don't need this type of functionality.

  const observer = new IntersectionObserver(
    (entries) => {
      for (const entry of entries) {
        const headingFragment = `#${entry.target.id}`;
        const tocItem = document.querySelector(`a[href="${headingFragment}"]`);

        if (entry.isIntersecting) {
          const previouslyActivatedItem =
            document.querySelector(".active-toc-item");

          previouslyActivatedItem?.classList.remove("active-toc-item");
          tocItem.classList.add("active-toc-item");
        } else {
          const isAnyOtherEntryIntersecting = entries.some(
            (e) => e.target.id !== entry.target.id && e.isIntersecting
          );

          if (isAnyOtherEntryIntersecting) {
            tocItem.classList.remove("active-toc-item");
          }
        }
      }
    },
    { root: null, rootMargin: "0px", threshold: [1] }
  );

  const sectionHeadings = document.querySelectorAll(
    "article > h2, article > h3"
  );

  for (const heading of sectionHeadings) {
    observer.observe(heading);
  }

  document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
    anchor.addEventListener("click", function (e) {
      e.preventDefault();

      document.querySelector(this.getAttribute("href")).scrollIntoView({
        behavior: "smooth",
      });
    });
  });
</script>

<style>
  .active-toc-item {
    font-weight: bold;
  }
</style>
